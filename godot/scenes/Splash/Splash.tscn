[gd_scene load_steps=7 format=2]

[ext_resource path="res://assets/images/logos/Freecoil_Logo_black_big.jpg" type="Texture" id=1]
[ext_resource path="res://assets/fonts/BlackOpsOne-Regular.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://assets/images/logos/FeralBytes_logo.jpg" type="Texture" id=3]

[sub_resource type="DynamicFont" id=1]
size = 20
font_data = ExtResource( 2 )

[sub_resource type="DynamicFont" id=2]
size = 20
font_data = ExtResource( 2 )

[sub_resource type="GDScript" id=3]
script/source = "tool
extends Label


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called when the node enters the scene tree for the first time.
func _ready():
    text = Settings.VERSION
    if Settings.DEBUG_LEVEL == 0:
        call_deferred(\"defer_screenshot\")
    
func defer_screenshot():
    print(\"Running defer_screenshot() function.\")
    var clear_mode = get_viewport().get_clear_mode()
    get_viewport().set_clear_mode(Viewport.CLEAR_MODE_ONLY_NEXT_FRAME)
    # Wait until the frame has finished before getting the texture.
    yield(VisualServer, \"frame_post_draw\")
    # Retrieve the captured image.
    var img = get_viewport().get_texture().get_data()
    get_viewport().set_clear_mode(clear_mode)
    # Flip it on the y-axis (because it's flipped).
    img.flip_y()
    img.save_png(\"res://assets/images/boot_splash.png\")
    # Update the version in FreecoiLPlugin.kt
    var f = File.new()
    f.open(\"../android/freecoilkotlin/src/main/java/com/feralbytes/games/freecoilkotlin/FreecoiLPlugin.kt\", f.READ_WRITE)
    var file_lines_array = []
    while not f.eof_reached():
        file_lines_array.append(f.get_line())
    for counter in range(0, file_lines_array.size()):
        var line = file_lines_array[counter]
        if \"        private const val FREECOIL_VERSION = \" in line:
            line  = '        private const val FREECOIL_VERSION = \"' + Settings.VERSION + '\"'
        file_lines_array[counter] = line
    var joined_strings = PoolStringArray(file_lines_array).join(\"\\n\")
    f.seek(0)
    f.store_string(joined_strings)
    f.close()
    joined_strings = null
    # Update the version in export_presets.cfg
    f = File.new()
    f.open(\"res://export_presets.cfg\", f.READ_WRITE)
    file_lines_array = []
    while not f.eof_reached():
        file_lines_array.append(f.get_line())
    for counter in range(0, file_lines_array.size()):
        var line = file_lines_array[counter]
        if \"version/name=\" in line:
            line  = 'version/name=\"' + Settings.VERSION + '\"'
        elif \"version/code=\" in line:
            line  = 'version/code=' + str(Settings.VERSION_MICRO_INT)
        elif \"application/file_version=\" in line:
            line  = 'application/file_version=\"' + Settings.VERSION + '\"'
        elif \"application/product_version=\" in line:
            line  = 'application/product_version=\"' + Settings.VERSION + '\"'
        file_lines_array[counter] = line
    joined_strings = PoolStringArray(file_lines_array).join(\"\\n\")
    f.seek(0)
    f.store_string(joined_strings)
    f.close()
    joined_strings = null
    # Update the version in build.gradle
    f = File.new()
    f.open(\"../android/freecoilkotlin/build.gradle\", f.READ_WRITE)
    file_lines_array = []
    while not f.eof_reached():
        file_lines_array.append(f.get_line())
    for counter in range(0, file_lines_array.size()):
        var line = file_lines_array[counter]
        if \"        versionName \" in line:
            line  = \"        versionName '\" + Settings.VERSION + \"'\"
        elif \"        versionCode \" in line:
            line  = '        versionCode ' + str(Settings.VERSION_MICRO_INT)
        file_lines_array[counter] = line
    joined_strings = PoolStringArray(file_lines_array).join(\"\\n\")
    f.seek(0)
    f.store_string(joined_strings)
    f.close()


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#    pass
"

[node name="Splash" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CenterContainer" type="CenterContainer" parent="."]
margin_right = 540.0
margin_bottom = 560.0
rect_min_size = Vector2( 540, 560 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="CenterContainer"]
margin_top = 165.0
margin_right = 540.0
margin_bottom = 394.0
rect_min_size = Vector2( 540, 0 )
alignment = 1

[node name="NinePatchRect" type="NinePatchRect" parent="CenterContainer/VBoxContainer"]
margin_right = 540.0
margin_bottom = 94.0
size_flags_stretch_ratio = 5.52
texture = ExtResource( 1 )
patch_margin_bottom = 94

[node name="NinePatchRect2" type="NinePatchRect" parent="CenterContainer/VBoxContainer"]
margin_top = 98.0
margin_right = 540.0
margin_bottom = 199.0
rect_min_size = Vector2( 540, 0 )
texture = ExtResource( 3 )
patch_margin_bottom = 101

[node name="HBoxContainer" type="HBoxContainer" parent="CenterContainer/VBoxContainer"]
margin_top = 203.0
margin_right = 540.0
margin_bottom = 229.0
alignment = 1

[node name="Label" type="Label" parent="CenterContainer/VBoxContainer/HBoxContainer"]
modulate = Color( 0.913725, 0.329412, 0.129412, 1 )
margin_left = 159.0
margin_right = 256.0
margin_bottom = 26.0
custom_fonts/font = SubResource( 1 )
text = "Version: "
align = 2

[node name="Version" type="Label" parent="CenterContainer/VBoxContainer/HBoxContainer"]
modulate = Color( 0.913725, 0.329412, 0.129412, 1 )
margin_left = 260.0
margin_right = 380.0
margin_bottom = 26.0
custom_fonts/font = SubResource( 2 )
text = "0.3.1-dev5"
align = 1
script = SubResource( 3 )
